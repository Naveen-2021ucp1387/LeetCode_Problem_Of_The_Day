/*********************463. Island Perimeter - EASY****************************/
class Solution {
public:
    int delrow[4] = {1, -1, 0, 0};
    int delcol[4] = {0, 0, -1, 1};
    void dfs(int i, int j, vector<vector<int>>& grid, int& perimeter,
             vector<vector<int>>& visit, int n, int m) {
        visit[i][j] = 1;
        int sum = 0;
        for (int k = 0; k < 4; k++) {
            int nrow = i + delrow[k];
            int ncol = j + delcol[k];

            if (nrow < n && nrow >= 0 && ncol < m && ncol >= 0) {
                if (grid[nrow][ncol] == 1) {
                    sum++;
                }
            }
        }
        perimeter = perimeter + 4 - sum;
        for (int k = 0; k < 4; k++) {
            int nrow = i + delrow[k];
            int ncol = j + delcol[k];

            if (nrow < n && nrow >= 0 && ncol < m && ncol >= 0) {
                if (grid[nrow][ncol] == 1 && visit[nrow][ncol] == 0) {
                    dfs(nrow, ncol, grid, perimeter, visit, n, m);
                }
            }
        }
    }
    int islandPerimeter(vector<vector<int>>& grid) {
        int perimeter = 0;
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visit(n, vector<int>(m, 0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    dfs(i, j, grid, perimeter, visit, n, m);
                    return perimeter;
                }
            }
        }
        return perimeter;
    }
};
